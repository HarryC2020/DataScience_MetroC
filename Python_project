{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Python Project   - created on Jan.26,2020"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use this [dataset](https://data.wa.gov/api/views/f6w7-q2d2/rows.csv?accessType=DOWNLOAD) of Battery Electric Vehicles (BEVs) and Plug-in Hybrid Electric Vehicles (PHEVs) that are currently registered through Washington State Department of Licensing (DOL), to get some insights and findings about this dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data comes originally from data.wa.gov, the State of Washington data site for public use.\n",
    "\n",
    "It consists of the following variables:\n",
    "\n",
    "1.    VIN (1-10): Vehicle Identification Number\n",
    "2.    County:\n",
    "3.    City: \n",
    "4.    State: \n",
    "5.    ZIP Code:\n",
    "6.    Model Year:\n",
    "7.    Make: car make\n",
    "8.    Model: car model\n",
    "9.    Electric Vehicle Type:\n",
    "10.   Clean Alternative Fuel Vehicle (CAFV) Eligibility:\n",
    "11.   Electric Range:\n",
    "12.   Base MSRP:\n",
    "13.   Legislative District:\n",
    "14.   DOL Vehicle ID: Washington State Department of Licensing (DOL) registered Vehicle ID\n",
    "15.   Vehicle Location: in latitude and longitude coordinates\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1, Importing the data and renaming the column names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Download dataset from \"https://catalog.data.gov/dataset/electric-vehicle-population-data\", named it \"electric_vehicle_population.csv\" as original"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pylab as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "os.chdir('C:\\\\My Documents\\\\Personal\\\\DSA Training\\\\Python\\Python project')\n",
    "#os.chdir('C:\\\\Users\\\\hchen\\\\Documents\\\\HarryC\\\\Python\\\\Python_Project')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "ecars = pd.read_csv(\"electric_vehicle_population.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['VIN (1-10)', 'County', 'City', 'State', 'ZIP Code', 'Model Year',\n",
       "       'Make', 'Model', 'Electric Vehicle Type',\n",
       "       'Clean Alternative Fuel Vehicle (CAFV) Eligibility', 'Electric Range',\n",
       "       'Base MSRP', 'Legislative District', 'DOL Vehicle ID',\n",
       "       'Vehicle Location'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecars.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 53307 entries, 0 to 53306\n",
      "Data columns (total 15 columns):\n",
      "VIN (1-10)                                           53307 non-null object\n",
      "County                                               53304 non-null object\n",
      "City                                                 53307 non-null object\n",
      "State                                                53307 non-null object\n",
      "ZIP Code                                             53307 non-null int64\n",
      "Model Year                                           53307 non-null int64\n",
      "Make                                                 53307 non-null object\n",
      "Model                                                53307 non-null object\n",
      "Electric Vehicle Type                                53307 non-null object\n",
      "Clean Alternative Fuel Vehicle (CAFV) Eligibility    53307 non-null object\n",
      "Electric Range                                       53307 non-null int64\n",
      "Base MSRP                                            52890 non-null float64\n",
      "Legislative District                                 53197 non-null float64\n",
      "DOL Vehicle ID                                       53307 non-null int64\n",
      "Vehicle Location                                     53306 non-null object\n",
      "dtypes: float64(2), int64(4), object(9)\n",
      "memory usage: 6.1+ MB\n"
     ]
    }
   ],
   "source": [
    "ecars.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIN (1-10)</th>\n",
       "      <th>County</th>\n",
       "      <th>City</th>\n",
       "      <th>State</th>\n",
       "      <th>ZIP Code</th>\n",
       "      <th>Model Year</th>\n",
       "      <th>Make</th>\n",
       "      <th>Model</th>\n",
       "      <th>Electric Vehicle Type</th>\n",
       "      <th>Clean Alternative Fuel Vehicle (CAFV) Eligibility</th>\n",
       "      <th>Electric Range</th>\n",
       "      <th>Base MSRP</th>\n",
       "      <th>Legislative District</th>\n",
       "      <th>DOL Vehicle ID</th>\n",
       "      <th>Vehicle Location</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1N4AZ0CP4D</td>\n",
       "      <td>King</td>\n",
       "      <td>North Bend</td>\n",
       "      <td>WA</td>\n",
       "      <td>98045</td>\n",
       "      <td>2013</td>\n",
       "      <td>Nissan</td>\n",
       "      <td>Leaf</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>75</td>\n",
       "      <td>28800.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>200956542</td>\n",
       "      <td>POINT (-121.668459 47.426482)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>5YJ3E1EB7K</td>\n",
       "      <td>King</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>WA</td>\n",
       "      <td>98112</td>\n",
       "      <td>2019</td>\n",
       "      <td>Tesla</td>\n",
       "      <td>Model 3</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>220</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>292178043</td>\n",
       "      <td>POINT (-122.296466 47.631708)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3C3CFFGEXF</td>\n",
       "      <td>King</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>WA</td>\n",
       "      <td>98103</td>\n",
       "      <td>2015</td>\n",
       "      <td>Fiat</td>\n",
       "      <td>500e</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>87</td>\n",
       "      <td>31800.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>257933378</td>\n",
       "      <td>POINT (-122.343577 47.672491)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   VIN (1-10) County        City State  ZIP Code  Model Year    Make    Model  \\\n",
       "0  1N4AZ0CP4D   King  North Bend    WA     98045        2013  Nissan     Leaf   \n",
       "1  5YJ3E1EB7K   King     Seattle    WA     98112        2019   Tesla  Model 3   \n",
       "2  3C3CFFGEXF   King     Seattle    WA     98103        2015    Fiat     500e   \n",
       "\n",
       "            Electric Vehicle Type  \\\n",
       "0  Battery Electric Vehicle (BEV)   \n",
       "1  Battery Electric Vehicle (BEV)   \n",
       "2  Battery Electric Vehicle (BEV)   \n",
       "\n",
       "  Clean Alternative Fuel Vehicle (CAFV) Eligibility  Electric Range  \\\n",
       "0           Clean Alternative Fuel Vehicle Eligible              75   \n",
       "1           Clean Alternative Fuel Vehicle Eligible             220   \n",
       "2           Clean Alternative Fuel Vehicle Eligible              87   \n",
       "\n",
       "   Base MSRP  Legislative District  DOL Vehicle ID  \\\n",
       "0    28800.0                   5.0       200956542   \n",
       "1    35000.0                  43.0       292178043   \n",
       "2    31800.0                  36.0       257933378   \n",
       "\n",
       "                Vehicle Location  \n",
       "0  POINT (-121.668459 47.426482)  \n",
       "1  POINT (-122.296466 47.631708)  \n",
       "2  POINT (-122.343577 47.672491)  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecars.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "ecar = ecars.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIN (1-10)</th>\n",
       "      <th>County</th>\n",
       "      <th>City</th>\n",
       "      <th>State</th>\n",
       "      <th>ZIP Code</th>\n",
       "      <th>Model Year</th>\n",
       "      <th>Make</th>\n",
       "      <th>Model</th>\n",
       "      <th>Electric Vehicle Type</th>\n",
       "      <th>Clean Alternative Fuel Vehicle (CAFV) Eligibility</th>\n",
       "      <th>Electric Range</th>\n",
       "      <th>Base MSRP</th>\n",
       "      <th>Legislative District</th>\n",
       "      <th>DOL Vehicle ID</th>\n",
       "      <th>Vehicle Location</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1N4AZ0CP4D</td>\n",
       "      <td>King</td>\n",
       "      <td>North Bend</td>\n",
       "      <td>WA</td>\n",
       "      <td>98045</td>\n",
       "      <td>2013</td>\n",
       "      <td>Nissan</td>\n",
       "      <td>Leaf</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>75</td>\n",
       "      <td>28800.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>200956542</td>\n",
       "      <td>POINT (-121.668459 47.426482)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>5YJ3E1EB7K</td>\n",
       "      <td>King</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>WA</td>\n",
       "      <td>98112</td>\n",
       "      <td>2019</td>\n",
       "      <td>Tesla</td>\n",
       "      <td>Model 3</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>220</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>292178043</td>\n",
       "      <td>POINT (-122.296466 47.631708)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3C3CFFGEXF</td>\n",
       "      <td>King</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>WA</td>\n",
       "      <td>98103</td>\n",
       "      <td>2015</td>\n",
       "      <td>Fiat</td>\n",
       "      <td>500e</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>87</td>\n",
       "      <td>31800.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>257933378</td>\n",
       "      <td>POINT (-122.343577 47.672491)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>5YJ3E1EA2J</td>\n",
       "      <td>King</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>WA</td>\n",
       "      <td>98118</td>\n",
       "      <td>2018</td>\n",
       "      <td>Tesla</td>\n",
       "      <td>Model 3</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>215</td>\n",
       "      <td>36000.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>141128417</td>\n",
       "      <td>POINT (-122.275593 47.54055)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>KNDJX3AE7G</td>\n",
       "      <td>Kitsap</td>\n",
       "      <td>Port Orchard</td>\n",
       "      <td>WA</td>\n",
       "      <td>98367</td>\n",
       "      <td>2016</td>\n",
       "      <td>Kia</td>\n",
       "      <td>Soul</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>93</td>\n",
       "      <td>31950.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>213714119</td>\n",
       "      <td>POINT (-122.65890100000001 47.466778)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   VIN (1-10)  County          City State  ZIP Code  Model Year    Make  \\\n",
       "0  1N4AZ0CP4D    King    North Bend    WA     98045        2013  Nissan   \n",
       "1  5YJ3E1EB7K    King       Seattle    WA     98112        2019   Tesla   \n",
       "2  3C3CFFGEXF    King       Seattle    WA     98103        2015    Fiat   \n",
       "3  5YJ3E1EA2J    King       Seattle    WA     98118        2018   Tesla   \n",
       "4  KNDJX3AE7G  Kitsap  Port Orchard    WA     98367        2016     Kia   \n",
       "\n",
       "     Model           Electric Vehicle Type  \\\n",
       "0     Leaf  Battery Electric Vehicle (BEV)   \n",
       "1  Model 3  Battery Electric Vehicle (BEV)   \n",
       "2     500e  Battery Electric Vehicle (BEV)   \n",
       "3  Model 3  Battery Electric Vehicle (BEV)   \n",
       "4     Soul  Battery Electric Vehicle (BEV)   \n",
       "\n",
       "  Clean Alternative Fuel Vehicle (CAFV) Eligibility  Electric Range  \\\n",
       "0           Clean Alternative Fuel Vehicle Eligible              75   \n",
       "1           Clean Alternative Fuel Vehicle Eligible             220   \n",
       "2           Clean Alternative Fuel Vehicle Eligible              87   \n",
       "3           Clean Alternative Fuel Vehicle Eligible             215   \n",
       "4           Clean Alternative Fuel Vehicle Eligible              93   \n",
       "\n",
       "   Base MSRP  Legislative District  DOL Vehicle ID  \\\n",
       "0    28800.0                   5.0       200956542   \n",
       "1    35000.0                  43.0       292178043   \n",
       "2    31800.0                  36.0       257933378   \n",
       "3    36000.0                  37.0       141128417   \n",
       "4    31950.0                  26.0       213714119   \n",
       "\n",
       "                        Vehicle Location  \n",
       "0          POINT (-121.668459 47.426482)  \n",
       "1          POINT (-122.296466 47.631708)  \n",
       "2          POINT (-122.343577 47.672491)  \n",
       "3           POINT (-122.275593 47.54055)  \n",
       "4  POINT (-122.65890100000001 47.466778)  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "ecar = ecar.rename(columns = {\"VIN (1-10)\":\"VIN\",\"ZIP Code\":\"ZIP\",\"Model Year\":\"Year\",\"Electric Vehicle Type\":\"Type\",\n",
    "                             \"Clean Alternative Fuel Vehicle (CAFV) Eligibility\":\"CAFV_Eligibility\",\"Electric Range\":\"Range\",\n",
    "                             \"Base MSRP\":\"MSRP\",\"Legislative District\":\"District\",\"DOL Vehicle ID\":\"DOL_VID\",\"Vehicle Location\":\"Location\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIN</th>\n",
       "      <th>County</th>\n",
       "      <th>City</th>\n",
       "      <th>State</th>\n",
       "      <th>ZIP</th>\n",
       "      <th>Year</th>\n",
       "      <th>Make</th>\n",
       "      <th>Model</th>\n",
       "      <th>Type</th>\n",
       "      <th>CAFV_Eligibility</th>\n",
       "      <th>Range</th>\n",
       "      <th>MSRP</th>\n",
       "      <th>District</th>\n",
       "      <th>DOL_VID</th>\n",
       "      <th>Location</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1N4AZ0CP4D</td>\n",
       "      <td>King</td>\n",
       "      <td>North Bend</td>\n",
       "      <td>WA</td>\n",
       "      <td>98045</td>\n",
       "      <td>2013</td>\n",
       "      <td>Nissan</td>\n",
       "      <td>Leaf</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>75</td>\n",
       "      <td>28800.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>200956542</td>\n",
       "      <td>POINT (-121.668459 47.426482)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>5YJ3E1EB7K</td>\n",
       "      <td>King</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>WA</td>\n",
       "      <td>98112</td>\n",
       "      <td>2019</td>\n",
       "      <td>Tesla</td>\n",
       "      <td>Model 3</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>220</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>292178043</td>\n",
       "      <td>POINT (-122.296466 47.631708)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3C3CFFGEXF</td>\n",
       "      <td>King</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>WA</td>\n",
       "      <td>98103</td>\n",
       "      <td>2015</td>\n",
       "      <td>Fiat</td>\n",
       "      <td>500e</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>87</td>\n",
       "      <td>31800.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>257933378</td>\n",
       "      <td>POINT (-122.343577 47.672491)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          VIN County        City State    ZIP  Year    Make    Model  \\\n",
       "0  1N4AZ0CP4D   King  North Bend    WA  98045  2013  Nissan     Leaf   \n",
       "1  5YJ3E1EB7K   King     Seattle    WA  98112  2019   Tesla  Model 3   \n",
       "2  3C3CFFGEXF   King     Seattle    WA  98103  2015    Fiat     500e   \n",
       "\n",
       "                             Type                         CAFV_Eligibility  \\\n",
       "0  Battery Electric Vehicle (BEV)  Clean Alternative Fuel Vehicle Eligible   \n",
       "1  Battery Electric Vehicle (BEV)  Clean Alternative Fuel Vehicle Eligible   \n",
       "2  Battery Electric Vehicle (BEV)  Clean Alternative Fuel Vehicle Eligible   \n",
       "\n",
       "   Range     MSRP  District    DOL_VID                       Location  \n",
       "0     75  28800.0       5.0  200956542  POINT (-121.668459 47.426482)  \n",
       "1    220  35000.0      43.0  292178043  POINT (-122.296466 47.631708)  \n",
       "2     87  31800.0      36.0  257933378  POINT (-122.343577 47.672491)  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 53307 entries, 0 to 53306\n",
      "Data columns (total 15 columns):\n",
      "VIN                 53307 non-null object\n",
      "County              53304 non-null object\n",
      "City                53307 non-null object\n",
      "State               53307 non-null object\n",
      "ZIP                 53307 non-null int64\n",
      "Year                53307 non-null int64\n",
      "Make                53307 non-null object\n",
      "Model               53307 non-null object\n",
      "Type                53307 non-null object\n",
      "CAFV_Eligibility    53307 non-null object\n",
      "Range               53307 non-null int64\n",
      "MSRP                52890 non-null float64\n",
      "District            53197 non-null float64\n",
      "DOL_VID             53307 non-null int64\n",
      "Location            53306 non-null object\n",
      "dtypes: float64(2), int64(4), object(9)\n",
      "memory usage: 6.1+ MB\n"
     ]
    }
   ],
   "source": [
    "ecar.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option(\"display.max.rows\", None)\n",
    "pd.set_option(\"display.max.columns\", None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Make</th>\n",
       "      <th>Audi</th>\n",
       "      <th>Azure Dynamics</th>\n",
       "      <th>BMW</th>\n",
       "      <th>Cadillac</th>\n",
       "      <th>Chevrolet</th>\n",
       "      <th>Chrysler</th>\n",
       "      <th>Fiat</th>\n",
       "      <th>Fisker</th>\n",
       "      <th>Ford</th>\n",
       "      <th>HYUNDAI</th>\n",
       "      <th>Honda</th>\n",
       "      <th>Hyundai</th>\n",
       "      <th>Jaguar</th>\n",
       "      <th>KIA</th>\n",
       "      <th>Kia</th>\n",
       "      <th>Mercedes-Benz</th>\n",
       "      <th>Mini</th>\n",
       "      <th>Mitsubishi</th>\n",
       "      <th>Nissan</th>\n",
       "      <th>Porsche</th>\n",
       "      <th>Smart</th>\n",
       "      <th>Subaru</th>\n",
       "      <th>Tesla</th>\n",
       "      <th>Toyota</th>\n",
       "      <th>Volkswagen</th>\n",
       "      <th>Volvo</th>\n",
       "      <th>Wheego Electric Cars</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2002</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2008</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2010</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2011</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>859</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>526</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "      <td>690</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>141</td>\n",
       "      <td>403</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2013</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>894</td>\n",
       "      <td>0</td>\n",
       "      <td>124</td>\n",
       "      <td>0</td>\n",
       "      <td>754</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2183</td>\n",
       "      <td>0</td>\n",
       "      <td>33</td>\n",
       "      <td>0</td>\n",
       "      <td>832</td>\n",
       "      <td>286</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2014</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>514</td>\n",
       "      <td>64</td>\n",
       "      <td>739</td>\n",
       "      <td>0</td>\n",
       "      <td>114</td>\n",
       "      <td>0</td>\n",
       "      <td>700</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>737</td>\n",
       "      <td>9</td>\n",
       "      <td>88</td>\n",
       "      <td>0</td>\n",
       "      <td>679</td>\n",
       "      <td>192</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2015</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>423</td>\n",
       "      <td>0</td>\n",
       "      <td>490</td>\n",
       "      <td>0</td>\n",
       "      <td>248</td>\n",
       "      <td>0</td>\n",
       "      <td>597</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1956</td>\n",
       "      <td>32</td>\n",
       "      <td>55</td>\n",
       "      <td>0</td>\n",
       "      <td>1122</td>\n",
       "      <td>74</td>\n",
       "      <td>131</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2016</td>\n",
       "      <td>189</td>\n",
       "      <td>0</td>\n",
       "      <td>402</td>\n",
       "      <td>13</td>\n",
       "      <td>283</td>\n",
       "      <td>0</td>\n",
       "      <td>132</td>\n",
       "      <td>0</td>\n",
       "      <td>828</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>613</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>472</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1224</td>\n",
       "      <td>70</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>1481</td>\n",
       "      <td>0</td>\n",
       "      <td>257</td>\n",
       "      <td>102</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2017</td>\n",
       "      <td>140</td>\n",
       "      <td>0</td>\n",
       "      <td>514</td>\n",
       "      <td>4</td>\n",
       "      <td>2478</td>\n",
       "      <td>96</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>546</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>317</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>984</td>\n",
       "      <td>54</td>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>1418</td>\n",
       "      <td>829</td>\n",
       "      <td>17</td>\n",
       "      <td>95</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2018</td>\n",
       "      <td>129</td>\n",
       "      <td>0</td>\n",
       "      <td>513</td>\n",
       "      <td>10</td>\n",
       "      <td>1063</td>\n",
       "      <td>530</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>122</td>\n",
       "      <td>0</td>\n",
       "      <td>532</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>335</td>\n",
       "      <td>29</td>\n",
       "      <td>49</td>\n",
       "      <td>174</td>\n",
       "      <td>1296</td>\n",
       "      <td>41</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>7593</td>\n",
       "      <td>632</td>\n",
       "      <td>25</td>\n",
       "      <td>176</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2019</td>\n",
       "      <td>207</td>\n",
       "      <td>0</td>\n",
       "      <td>208</td>\n",
       "      <td>0</td>\n",
       "      <td>993</td>\n",
       "      <td>115</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>100</td>\n",
       "      <td>7</td>\n",
       "      <td>17</td>\n",
       "      <td>54</td>\n",
       "      <td>74</td>\n",
       "      <td>0</td>\n",
       "      <td>758</td>\n",
       "      <td>66</td>\n",
       "      <td>83</td>\n",
       "      <td>114</td>\n",
       "      <td>973</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>33</td>\n",
       "      <td>4745</td>\n",
       "      <td>124</td>\n",
       "      <td>397</td>\n",
       "      <td>143</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Make  Audi  Azure Dynamics  BMW  Cadillac  Chevrolet  Chrysler  Fiat  Fisker  \\\n",
       "Year                                                                           \n",
       "2002     0               0    0         0          0         0     0       0   \n",
       "2008     0               0    0         0          0         0     0       0   \n",
       "2010     0               0    0         0          0         0     0       0   \n",
       "2011     0               5    0         0         73         0     0       0   \n",
       "2012     0               3    0         0        526         0     0      21   \n",
       "2013     0               0    0         0        894         0   124       0   \n",
       "2014     0               0  514        64        739         0   114       0   \n",
       "2015     0               0  423         0        490         0   248       0   \n",
       "2016   189               0  402        13        283         0   132       0   \n",
       "2017   140               0  514         4       2478        96    17       0   \n",
       "2018   129               0  513        10       1063       530     1       0   \n",
       "2019   207               0  208         0        993       115     0       0   \n",
       "2020     0               0    0         0          0         0     0       0   \n",
       "\n",
       "Make  Ford  HYUNDAI  Honda  Hyundai  Jaguar  KIA  Kia  Mercedes-Benz  Mini  \\\n",
       "Year                                                                         \n",
       "2002     0        0      0        0       0    0    0              0     0   \n",
       "2008     0        0      0        0       0    0    0              0     0   \n",
       "2010     0        0      0        0       0    0    0              0     0   \n",
       "2011     0        0      0        0       0    0    0              0     0   \n",
       "2012    18        0      0        0       0    0    0              0     0   \n",
       "2013   754        0      0        0       0    0    0              0     0   \n",
       "2014   700        0      8        0       0    0    0             35     0   \n",
       "2015   597        0      0        0       0    0   21             30     0   \n",
       "2016   828        0      0      613       0    0  472             27     0   \n",
       "2017   546        0      0       30       0    0  317             18     0   \n",
       "2018   122        0    532       12       0    0  335             29    49   \n",
       "2019   100        7     17       54      74    0  758             66    83   \n",
       "2020     0        0      0        0      14    4    0              0     0   \n",
       "\n",
       "Make  Mitsubishi  Nissan  Porsche  Smart  Subaru  Tesla  Toyota  Volkswagen  \\\n",
       "Year                                                                          \n",
       "2002           0       0        0      0       0      0       4           0   \n",
       "2008           0       0        0      0       0     25       0           0   \n",
       "2010           0       0        0      0       0     28       0           0   \n",
       "2011           0     859        0     11       0      9       0           0   \n",
       "2012          49     690        0      0       0    141     403           0   \n",
       "2013           0    2183        0     33       0    832     286           0   \n",
       "2014          17     737        9     88       0    679     192           0   \n",
       "2015           0    1956       32     55       0   1122      74         131   \n",
       "2016          13    1224       70     30       0   1481       0         257   \n",
       "2017           1     984       54     51       0   1418     829          17   \n",
       "2018         174    1296       41     20       0   7593     632          25   \n",
       "2019         114     973        0      2      33   4745     124         397   \n",
       "2020           0       0        0      0       0      0       0           0   \n",
       "\n",
       "Make  Volvo  Wheego Electric Cars  \n",
       "Year                               \n",
       "2002      0                     0  \n",
       "2008      0                     0  \n",
       "2010      0                     0  \n",
       "2011      0                     3  \n",
       "2012      0                     0  \n",
       "2013      0                     0  \n",
       "2014      0                     0  \n",
       "2015      0                     0  \n",
       "2016    102                     0  \n",
       "2017     95                     0  \n",
       "2018    176                     0  \n",
       "2019    143                     0  \n",
       "2020      0                     0  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(ecar.Year, ecar.Make)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# check outliers of Year 2002 and 2020, and remove those outliers if value counts are not significant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2002    4\n",
       "Name: Year, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.loc[ecar.Year == 2002,'Year'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2020    18\n",
       "Name: Year, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.loc[ecar.Year == 2020, 'Year'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(53307, 15)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove 4 x observations of Year 2002 & 18 x observations of Year 2020\n",
    "ecar = ecar.loc[-(ecar.Year==2002),:]\n",
    "ecar = ecar.loc[-(ecar.Year==2020),:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(53285, 15)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove rows containing null values in Columns of \"County\",\"MSRP\",\"District\" and \"Location\" as shown in ecar.info()\n",
    "ecar = ecar.loc[ecar.County.notnull() & ecar.MSRP.notnull() & ecar.District.notnull() & ecar.Location.notnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(52777, 15)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "VIN                 False\n",
       "County              False\n",
       "City                False\n",
       "State               False\n",
       "ZIP                 False\n",
       "Year                False\n",
       "Make                False\n",
       "Model               False\n",
       "Type                False\n",
       "CAFV_Eligibility    False\n",
       "Range               False\n",
       "MSRP                False\n",
       "District            False\n",
       "DOL_VID             False\n",
       "Location            False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.isnull().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "VIN                 52777\n",
       "County              52777\n",
       "City                52777\n",
       "State               52777\n",
       "ZIP                 52777\n",
       "Year                52777\n",
       "Make                52777\n",
       "Model               52777\n",
       "Type                52777\n",
       "CAFV_Eligibility    52777\n",
       "Range               52777\n",
       "MSRP                52777\n",
       "District            52777\n",
       "DOL_VID             52777\n",
       "Location            52777\n",
       "dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2, Data exploration and manipulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ZIP</th>\n",
       "      <th>Year</th>\n",
       "      <th>Range</th>\n",
       "      <th>MSRP</th>\n",
       "      <th>District</th>\n",
       "      <th>DOL_VID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>52777.000000</td>\n",
       "      <td>52777.000000</td>\n",
       "      <td>52777.000000</td>\n",
       "      <td>52777.000000</td>\n",
       "      <td>52777.000000</td>\n",
       "      <td>5.277700e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>98245.016503</td>\n",
       "      <td>2016.373799</td>\n",
       "      <td>125.400193</td>\n",
       "      <td>40953.096046</td>\n",
       "      <td>30.410766</td>\n",
       "      <td>2.429864e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>290.105540</td>\n",
       "      <td>2.198991</td>\n",
       "      <td>85.124511</td>\n",
       "      <td>16776.625089</td>\n",
       "      <td>14.646718</td>\n",
       "      <td>1.246673e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>98001.000000</td>\n",
       "      <td>2008.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>22995.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.949000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>98052.000000</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>31635.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>1.527941e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>98117.000000</td>\n",
       "      <td>2017.000000</td>\n",
       "      <td>87.000000</td>\n",
       "      <td>35000.000000</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>2.227732e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>98362.000000</td>\n",
       "      <td>2018.000000</td>\n",
       "      <td>215.000000</td>\n",
       "      <td>39145.000000</td>\n",
       "      <td>43.000000</td>\n",
       "      <td>3.184657e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>99403.000000</td>\n",
       "      <td>2019.000000</td>\n",
       "      <td>289.000000</td>\n",
       "      <td>845000.000000</td>\n",
       "      <td>49.000000</td>\n",
       "      <td>4.792548e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                ZIP          Year         Range           MSRP      District  \\\n",
       "count  52777.000000  52777.000000  52777.000000   52777.000000  52777.000000   \n",
       "mean   98245.016503   2016.373799    125.400193   40953.096046     30.410766   \n",
       "std      290.105540      2.198991     85.124511   16776.625089     14.646718   \n",
       "min    98001.000000   2008.000000      6.000000   22995.000000      1.000000   \n",
       "25%    98052.000000   2015.000000     38.000000   31635.000000     21.000000   \n",
       "50%    98117.000000   2017.000000     87.000000   35000.000000     35.000000   \n",
       "75%    98362.000000   2018.000000    215.000000   39145.000000     43.000000   \n",
       "max    99403.000000   2019.000000    289.000000  845000.000000     49.000000   \n",
       "\n",
       "            DOL_VID  \n",
       "count  5.277700e+04  \n",
       "mean   2.429864e+08  \n",
       "std    1.246673e+08  \n",
       "min    1.949000e+03  \n",
       "25%    1.527941e+08  \n",
       "50%    2.227732e+08  \n",
       "75%    3.184657e+08  \n",
       "max    4.792548e+08  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIN</th>\n",
       "      <th>County</th>\n",
       "      <th>City</th>\n",
       "      <th>State</th>\n",
       "      <th>Make</th>\n",
       "      <th>Model</th>\n",
       "      <th>Type</th>\n",
       "      <th>CAFV_Eligibility</th>\n",
       "      <th>Location</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>52777</td>\n",
       "      <td>52777</td>\n",
       "      <td>52777</td>\n",
       "      <td>52777</td>\n",
       "      <td>52777</td>\n",
       "      <td>52777</td>\n",
       "      <td>52777</td>\n",
       "      <td>52777</td>\n",
       "      <td>52777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>unique</td>\n",
       "      <td>3489</td>\n",
       "      <td>39</td>\n",
       "      <td>391</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>80</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>top</td>\n",
       "      <td>5YJ3E1EB6J</td>\n",
       "      <td>King</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>WA</td>\n",
       "      <td>Tesla</td>\n",
       "      <td>Leaf</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>POINT (-122.122018 47.678465)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>freq</td>\n",
       "      <td>319</td>\n",
       "      <td>28750</td>\n",
       "      <td>10061</td>\n",
       "      <td>52777</td>\n",
       "      <td>18044</td>\n",
       "      <td>10892</td>\n",
       "      <td>35671</td>\n",
       "      <td>42958</td>\n",
       "      <td>1556</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               VIN County     City  State   Make  Model  \\\n",
       "count        52777  52777    52777  52777  52777  52777   \n",
       "unique        3489     39      391      1     26     80   \n",
       "top     5YJ3E1EB6J   King  Seattle     WA  Tesla   Leaf   \n",
       "freq           319  28750    10061  52777  18044  10892   \n",
       "\n",
       "                                  Type  \\\n",
       "count                            52777   \n",
       "unique                               2   \n",
       "top     Battery Electric Vehicle (BEV)   \n",
       "freq                             35671   \n",
       "\n",
       "                               CAFV_Eligibility                       Location  \n",
       "count                                     52777                          52777  \n",
       "unique                                        2                            496  \n",
       "top     Clean Alternative Fuel Vehicle Eligible  POINT (-122.122018 47.678465)  \n",
       "freq                                      42958                           1556  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.describe(include=np.object)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Battery Electric Vehicle (BEV)',\n",
       "       'Plug-in Hybrid Electric Vehicle (PHEV)'], dtype=object)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.Type.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Clean Alternative Fuel Vehicle Eligible',\n",
       "       'Not eligible due to low battery range'], dtype=object)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.CAFV_Eligibility.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "ecar['Type1'] = np.where(ecar.Type.str.find('BEV')>-1, 1,0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ecar.loc[1:20,['Type','Type1']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "ecar[\"Eligibility1\"] = np.where(ecar.CAFV_Eligibility.str.find('Clean')>-1, 1, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Type</th>\n",
       "      <th>Type1</th>\n",
       "      <th>CAFV_Eligibility</th>\n",
       "      <th>Eligibility1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>Plug-in Hybrid Electric Vehicle (PHEV)</td>\n",
       "      <td>0</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>1</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      Type  Type1  \\\n",
       "1           Battery Electric Vehicle (BEV)      1   \n",
       "2           Battery Electric Vehicle (BEV)      1   \n",
       "3           Battery Electric Vehicle (BEV)      1   \n",
       "4           Battery Electric Vehicle (BEV)      1   \n",
       "5           Battery Electric Vehicle (BEV)      1   \n",
       "6           Battery Electric Vehicle (BEV)      1   \n",
       "7           Battery Electric Vehicle (BEV)      1   \n",
       "8           Battery Electric Vehicle (BEV)      1   \n",
       "9           Battery Electric Vehicle (BEV)      1   \n",
       "10          Battery Electric Vehicle (BEV)      1   \n",
       "11          Battery Electric Vehicle (BEV)      1   \n",
       "12          Battery Electric Vehicle (BEV)      1   \n",
       "13          Battery Electric Vehicle (BEV)      1   \n",
       "14          Battery Electric Vehicle (BEV)      1   \n",
       "15          Battery Electric Vehicle (BEV)      1   \n",
       "16          Battery Electric Vehicle (BEV)      1   \n",
       "17  Plug-in Hybrid Electric Vehicle (PHEV)      0   \n",
       "18          Battery Electric Vehicle (BEV)      1   \n",
       "19          Battery Electric Vehicle (BEV)      1   \n",
       "20          Battery Electric Vehicle (BEV)      1   \n",
       "\n",
       "                           CAFV_Eligibility  Eligibility1  \n",
       "1   Clean Alternative Fuel Vehicle Eligible             1  \n",
       "2   Clean Alternative Fuel Vehicle Eligible             1  \n",
       "3   Clean Alternative Fuel Vehicle Eligible             1  \n",
       "4   Clean Alternative Fuel Vehicle Eligible             1  \n",
       "5   Clean Alternative Fuel Vehicle Eligible             1  \n",
       "6   Clean Alternative Fuel Vehicle Eligible             1  \n",
       "7   Clean Alternative Fuel Vehicle Eligible             1  \n",
       "8   Clean Alternative Fuel Vehicle Eligible             1  \n",
       "9   Clean Alternative Fuel Vehicle Eligible             1  \n",
       "10  Clean Alternative Fuel Vehicle Eligible             1  \n",
       "11  Clean Alternative Fuel Vehicle Eligible             1  \n",
       "12  Clean Alternative Fuel Vehicle Eligible             1  \n",
       "13  Clean Alternative Fuel Vehicle Eligible             1  \n",
       "14  Clean Alternative Fuel Vehicle Eligible             1  \n",
       "15  Clean Alternative Fuel Vehicle Eligible             1  \n",
       "16  Clean Alternative Fuel Vehicle Eligible             1  \n",
       "17  Clean Alternative Fuel Vehicle Eligible             1  \n",
       "18  Clean Alternative Fuel Vehicle Eligible             1  \n",
       "19  Clean Alternative Fuel Vehicle Eligible             1  \n",
       "20  Clean Alternative Fuel Vehicle Eligible             1  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.loc[1:20,['Type','Type1','CAFV_Eligibility','Eligibility1']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CAFV_Eligibility</th>\n",
       "      <th>Eligibility1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>39</td>\n",
       "      <td>Not eligible due to low battery range</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>44</td>\n",
       "      <td>Not eligible due to low battery range</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>47</td>\n",
       "      <td>Not eligible due to low battery range</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>54</td>\n",
       "      <td>Not eligible due to low battery range</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>59</td>\n",
       "      <td>Not eligible due to low battery range</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>65</td>\n",
       "      <td>Not eligible due to low battery range</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>77</td>\n",
       "      <td>Not eligible due to low battery range</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>80</td>\n",
       "      <td>Not eligible due to low battery range</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>81</td>\n",
       "      <td>Not eligible due to low battery range</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         CAFV_Eligibility  Eligibility1\n",
       "39  Not eligible due to low battery range             0\n",
       "44  Not eligible due to low battery range             0\n",
       "47  Not eligible due to low battery range             0\n",
       "54  Not eligible due to low battery range             0\n",
       "59  Not eligible due to low battery range             0\n",
       "65  Not eligible due to low battery range             0\n",
       "77  Not eligible due to low battery range             0\n",
       "80  Not eligible due to low battery range             0\n",
       "81  Not eligible due to low battery range             0"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.loc[ecar.Eligibility1==0,['CAFV_Eligibility','Eligibility1']].iloc[1:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIN</th>\n",
       "      <th>County</th>\n",
       "      <th>City</th>\n",
       "      <th>State</th>\n",
       "      <th>ZIP</th>\n",
       "      <th>Year</th>\n",
       "      <th>Make</th>\n",
       "      <th>Model</th>\n",
       "      <th>Type</th>\n",
       "      <th>CAFV_Eligibility</th>\n",
       "      <th>Range</th>\n",
       "      <th>MSRP</th>\n",
       "      <th>District</th>\n",
       "      <th>DOL_VID</th>\n",
       "      <th>Location</th>\n",
       "      <th>Type1</th>\n",
       "      <th>Eligibility1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1N4AZ0CP4D</td>\n",
       "      <td>King</td>\n",
       "      <td>North Bend</td>\n",
       "      <td>WA</td>\n",
       "      <td>98045</td>\n",
       "      <td>2013</td>\n",
       "      <td>Nissan</td>\n",
       "      <td>Leaf</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>75</td>\n",
       "      <td>28800.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>200956542</td>\n",
       "      <td>POINT (-121.668459 47.426482)</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>5YJ3E1EB7K</td>\n",
       "      <td>King</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>WA</td>\n",
       "      <td>98112</td>\n",
       "      <td>2019</td>\n",
       "      <td>Tesla</td>\n",
       "      <td>Model 3</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>220</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>292178043</td>\n",
       "      <td>POINT (-122.296466 47.631708)</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3C3CFFGEXF</td>\n",
       "      <td>King</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>WA</td>\n",
       "      <td>98103</td>\n",
       "      <td>2015</td>\n",
       "      <td>Fiat</td>\n",
       "      <td>500e</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>87</td>\n",
       "      <td>31800.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>257933378</td>\n",
       "      <td>POINT (-122.343577 47.672491)</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>5YJ3E1EA2J</td>\n",
       "      <td>King</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>WA</td>\n",
       "      <td>98118</td>\n",
       "      <td>2018</td>\n",
       "      <td>Tesla</td>\n",
       "      <td>Model 3</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>215</td>\n",
       "      <td>36000.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>141128417</td>\n",
       "      <td>POINT (-122.275593 47.54055)</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>KNDJX3AE7G</td>\n",
       "      <td>Kitsap</td>\n",
       "      <td>Port Orchard</td>\n",
       "      <td>WA</td>\n",
       "      <td>98367</td>\n",
       "      <td>2016</td>\n",
       "      <td>Kia</td>\n",
       "      <td>Soul</td>\n",
       "      <td>Battery Electric Vehicle (BEV)</td>\n",
       "      <td>Clean Alternative Fuel Vehicle Eligible</td>\n",
       "      <td>93</td>\n",
       "      <td>31950.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>213714119</td>\n",
       "      <td>POINT (-122.65890100000001 47.466778)</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          VIN  County          City State    ZIP  Year    Make    Model  \\\n",
       "0  1N4AZ0CP4D    King    North Bend    WA  98045  2013  Nissan     Leaf   \n",
       "1  5YJ3E1EB7K    King       Seattle    WA  98112  2019   Tesla  Model 3   \n",
       "2  3C3CFFGEXF    King       Seattle    WA  98103  2015    Fiat     500e   \n",
       "3  5YJ3E1EA2J    King       Seattle    WA  98118  2018   Tesla  Model 3   \n",
       "4  KNDJX3AE7G  Kitsap  Port Orchard    WA  98367  2016     Kia     Soul   \n",
       "\n",
       "                             Type                         CAFV_Eligibility  \\\n",
       "0  Battery Electric Vehicle (BEV)  Clean Alternative Fuel Vehicle Eligible   \n",
       "1  Battery Electric Vehicle (BEV)  Clean Alternative Fuel Vehicle Eligible   \n",
       "2  Battery Electric Vehicle (BEV)  Clean Alternative Fuel Vehicle Eligible   \n",
       "3  Battery Electric Vehicle (BEV)  Clean Alternative Fuel Vehicle Eligible   \n",
       "4  Battery Electric Vehicle (BEV)  Clean Alternative Fuel Vehicle Eligible   \n",
       "\n",
       "   Range     MSRP  District    DOL_VID                               Location  \\\n",
       "0     75  28800.0       5.0  200956542          POINT (-121.668459 47.426482)   \n",
       "1    220  35000.0      43.0  292178043          POINT (-122.296466 47.631708)   \n",
       "2     87  31800.0      36.0  257933378          POINT (-122.343577 47.672491)   \n",
       "3    215  36000.0      37.0  141128417           POINT (-122.275593 47.54055)   \n",
       "4     93  31950.0      26.0  213714119  POINT (-122.65890100000001 47.466778)   \n",
       "\n",
       "   Type1  Eligibility1  \n",
       "0      1             1  \n",
       "1      1             1  \n",
       "2      1             1  \n",
       "3      1             1  \n",
       "4      1             1  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(52777, 17)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3, Analyzing with Python visualization tools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get the top city list in WA State where people are more likely to buy an Electric Car\n",
    "total_counts = ecar.loc[ecar.State=='WA','City'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Seattle                     10061\n",
       "Bellevue                     2983\n",
       "Redmond                      2287\n",
       "Kirkland                     1790\n",
       "Vancouver                    1745\n",
       "Sammamish                    1634\n",
       "Bothell                      1490\n",
       "Olympia                      1370\n",
       "Renton                       1187\n",
       "Tacoma                       1160\n",
       "Bellingham                   1012\n",
       "Issaquah                      918\n",
       "Woodinville                   875\n",
       "Mercer Island                 866\n",
       "Everett                       722\n",
       "Spokane                       684\n",
       "Shoreline                     677\n",
       "Lynnwood                      666\n",
       "Kent                          634\n",
       "Edmonds                       622\n",
       "Bainbridge Island             612\n",
       "Snohomish                     612\n",
       "Auburn                        527\n",
       "Gig Harbor                    527\n",
       "Puyallup                      496\n",
       "Federal Way                   377\n",
       "Camas                         376\n",
       "Maple Valley                  360\n",
       "Kenmore                       359\n",
       "Bremerton                     359\n",
       "Lacey                         325\n",
       "Port Orchard                  298\n",
       "Snoqualmie                    275\n",
       "Lake Stevens                  273\n",
       "Burien                        259\n",
       "Richland                      257\n",
       "Kennewick                     254\n",
       "Newcastle                     254\n",
       "Mukilteo                      247\n",
       "Marysville                    240\n",
       "Vashon                        240\n",
       "Poulsbo                       239\n",
       "Port Townsend                 219\n",
       "Tumwater                      215\n",
       "University Place              214\n",
       "Sequim                        209\n",
       "Lake Forest Park              208\n",
       "Mount Vernon                  206\n",
       "Anacortes                     205\n",
       "Monroe                        201\n",
       "Duvall                        200\n",
       "Bonney Lake                   199\n",
       "North Bend                    196\n",
       "Lakewood                      191\n",
       "Battle Ground                 179\n",
       "Mill Creek                    179\n",
       "Washougal                     175\n",
       "Yakima                        163\n",
       "Ridgefield                    160\n",
       "Friday Harbor                 157\n",
       "Oak Harbor                    154\n",
       "Camano Island                 150\n",
       "Arlington                     150\n",
       "Port Angeles                  147\n",
       "Shelton                       145\n",
       "Spokane Valley                144\n",
       "Des Moines                    134\n",
       "Medina                        133\n",
       "Carnation                     128\n",
       "Stanwood                      125\n",
       "Pasco                         123\n",
       "Wenatchee                     123\n",
       "Blaine                        122\n",
       "Covington                     121\n",
       "Spanaway                      116\n",
       "Ferndale                      113\n",
       "Mountlake Terrace             109\n",
       "Tukwila                       108\n",
       "Graham                        108\n",
       "Clyde Hill                    107\n",
       "Silverdale                    105\n",
       "Seatac                        101\n",
       "Longview                      100\n",
       "Yelm                           98\n",
       "Enumclaw                       96\n",
       "Normandy Park                  96\n",
       "Kingston                       93\n",
       "Walla Walla                    92\n",
       "Centralia                      89\n",
       "Lake Tapps                     83\n",
       "Brush Prairie                  83\n",
       "Edgewood                       77\n",
       "Fall City                      77\n",
       "Eastsound                      76\n",
       "Coupeville                     75\n",
       "Langley                        75\n",
       "Leavenworth                    73\n",
       "Clinton                        72\n",
       "Fox Island                     70\n",
       "Sedro Woolley                  70\n",
       "Brier                          69\n",
       "Freeland                       67\n",
       "Lynden                         66\n",
       "East Wenatchee                 66\n",
       "Moses Lake                     66\n",
       "Yarrow Point                   66\n",
       "Pullman                        63\n",
       "Ellensburg                     63\n",
       "Steilacoom                     62\n",
       "Buckley                        61\n",
       "Liberty Lake                   60\n",
       "Chehalis                       60\n",
       "La Center                      57\n",
       "Lopez Island                   55\n",
       "West Richland                  55\n",
       "Aberdeen                       53\n",
       "Orting                         51\n",
       "Tulalip                        50\n",
       "Port Ludlow                    49\n",
       "Kelso                          48\n",
       "Woodland                       48\n",
       "White Salmon                   45\n",
       "Tenino                         44\n",
       "Belfair                        44\n",
       "Cheney                         43\n",
       "Dupont                         40\n",
       "Burlington                     40\n",
       "Roy                            39\n",
       "Black Diamond                  39\n",
       "Ocean Shores                   39\n",
       "Woodway                        38\n",
       "Eatonville                     35\n",
       "Nine Mile Falls                35\n",
       "Chelan                         35\n",
       "Olalla                         34\n",
       "Greenbank                      33\n",
       "Cle Elum                       33\n",
       "Fircrest                       33\n",
       "Bow                            32\n",
       "La Conner                      32\n",
       "Montesano                      31\n",
       "Rochester                      31\n",
       "Hunts Point                    31\n",
       "Everson                        31\n",
       "Sultan                         30\n",
       "Sumner                         30\n",
       "Suquamish                      29\n",
       "Fife                           27\n",
       "Lakebay                        26\n",
       "Grapeview                      26\n",
       "Ravensdale                     26\n",
       "Benton City                    26\n",
       "Granite Falls                  26\n",
       "Milton                         25\n",
       "Gold Bar                       25\n",
       "Hansville                      24\n",
       "Stevenson                      23\n",
       "Colbert                        22\n",
       "Seabeck                        22\n",
       "Allyn                          22\n",
       "Point Roberts                  22\n",
       "Elma                           21\n",
       "Indianola                      21\n",
       "Hoquiam                        21\n",
       "Deer Park                      21\n",
       "Nordland                       20\n",
       "Ocean Park                     20\n",
       "Kalama                         19\n",
       "Orondo                         19\n",
       "Beaux Arts                     19\n",
       "Mead                           19\n",
       "College Place                  19\n",
       "Cashmere                       19\n",
       "Ruston                         18\n",
       "Preston                        18\n",
       "Hoodsport                      18\n",
       "Olga                           17\n",
       "Clarkston                      17\n",
       "Selah                          17\n",
       "Pacific                        16\n",
       "Maple Falls                    16\n",
       "Greenacres                     16\n",
       "Sunnyside                      16\n",
       "Winlock                        16\n",
       "Quincy                         16\n",
       "Port Hadlock                   15\n",
       "Rainier                        15\n",
       "Joint Base Lewis McChord       15\n",
       "Colville                       15\n",
       "Castle Rock                    15\n",
       "Lummi Island                   15\n",
       "Winthrop                       14\n",
       "Quilcene                       14\n",
       "Otis Orchards                  14\n",
       "Yacolt                         13\n",
       "Ephrata                        13\n",
       "Toledo                         13\n",
       "Ronald                         13\n",
       "Vaughn                         12\n",
       "Custer                         12\n",
       "Othello                        12\n",
       "Deming                         12\n",
       "Long Beach                     11\n",
       "McCleary                       11\n",
       "Union                          11\n",
       "Manson                         11\n",
       "Lyle                           10\n",
       "Forest Park                    10\n",
       "Chattaroy                      10\n",
       "Medical Lake                   10\n",
       "Brinnon                        10\n",
       "Raymond                        10\n",
       "Anderson Island                10\n",
       "Newman Lake                    10\n",
       "Palouse                        10\n",
       "Oakville                        9\n",
       "Cathlamet                       9\n",
       "Moxee                           9\n",
       "Chimacum                        9\n",
       "Newport                         9\n",
       "Kettle Falls                    9\n",
       "Snoqualmie Pass                 9\n",
       "Longbranch                      8\n",
       "Algona                          8\n",
       "Prosser                         8\n",
       "Peshastin                       8\n",
       "Goldendale                      8\n",
       "Tonasket                        8\n",
       "Elk                             8\n",
       "Easton                          7\n",
       "Mattawa                         7\n",
       "Orcas                           7\n",
       "Sumas                           7\n",
       "Chewelah                        7\n",
       "Soap Lake                       7\n",
       "Townsend                        7\n",
       "Silverlake                      7\n",
       "Entiat                          7\n",
       "Westport                        7\n",
       "Twisp                           7\n",
       "Pacific Beach                   7\n",
       "Malaga                          6\n",
       "Zillah                          6\n",
       "Amboy                           6\n",
       "Onalaska                        6\n",
       "Airway Heights                  6\n",
       "Tahuya                          6\n",
       "Okanogan                        6\n",
       "Colfax                          6\n",
       "Trout Lake                      6\n",
       "Ilwaco                          6\n",
       "Seaview                         6\n",
       "Veradale                        6\n",
       "Dayton                          6\n",
       "Valleyford                      6\n",
       "Grandview                       6\n",
       "Waterville                      5\n",
       "Concrete                        5\n",
       "Toppenish                       5\n",
       "Deer Harbor                     5\n",
       "Forks                           5\n",
       "Coulee City                     5\n",
       "Mica                            5\n",
       "Packwood                        5\n",
       "Keyport                         5\n",
       "Dallesport                      5\n",
       "Ritzville                       5\n",
       "Rosalia                         4\n",
       "Ariel                           4\n",
       "Silver Creek                    4\n",
       "Darrington                      4\n",
       "Lilliwaup                       4\n",
       "Underwood                       4\n",
       "Grand Coulee                    4\n",
       "Asotin                          4\n",
       "Carlton                         4\n",
       "Mossyrock                       4\n",
       "Touchet                         4\n",
       "Loon Lake                       4\n",
       "Rock Island                     3\n",
       "Waitsburg                       3\n",
       "Omak                            3\n",
       "Republic                        3\n",
       "Evans                           3\n",
       "Naselle                         3\n",
       "Nooksack                        3\n",
       "Davenport                       3\n",
       "Endicott                        3\n",
       "Mazama                          3\n",
       "Glenwood                        3\n",
       "Reardan                         3\n",
       "Acme                            3\n",
       "Clearlake                       3\n",
       "Southworth                      3\n",
       "Wilkeson                        3\n",
       "Riverside                       3\n",
       "Royal City                      3\n",
       "Roche Harbor                    3\n",
       "Cosmopolis                      3\n",
       "Jblm                            3\n",
       "Morton                          3\n",
       "Union Gap                       2\n",
       "Rice                            2\n",
       "Randle                          2\n",
       "Outlook                         2\n",
       "Connell                         2\n",
       "Ashford                         2\n",
       "Burbank                         2\n",
       "Mabton                          2\n",
       "North Bonneville                2\n",
       "Metaline Falls                  2\n",
       "Naches                          2\n",
       "Tokeland                        2\n",
       "Mineral                         2\n",
       "Fairchild Air Force Base        2\n",
       "Roslyn                          2\n",
       "Wapato                          2\n",
       "Carson                          2\n",
       "Fruitland                       2\n",
       "Amanda Park                     2\n",
       "Napavine                        2\n",
       "Shaw Island                     2\n",
       "Oroville                        2\n",
       "Toutle                          2\n",
       "Garfield                        2\n",
       "Curlew                          2\n",
       "Warden                          2\n",
       "Valley                          2\n",
       "Fort Lewis                      2\n",
       "Granger                         2\n",
       "Brewster                        2\n",
       "Colton                          2\n",
       "Lamont                          1\n",
       "Kittitas                        1\n",
       "Gifford                         1\n",
       "George                          1\n",
       "Cinebar                         1\n",
       "Neah Bay                        1\n",
       "Curtis                          1\n",
       "Ocean City                      1\n",
       "Skykomish                       1\n",
       "South Prairie                   1\n",
       "Sekiu                           1\n",
       "Parkland                        1\n",
       "Ford                            1\n",
       "Conconully                      1\n",
       "Wellpinit                       1\n",
       "Klickitat                       1\n",
       "Menlo                           1\n",
       "Nahcotta                        1\n",
       "Seahurst                        1\n",
       "Seven Bays                      1\n",
       "Chelan Falls                    1\n",
       "Sprague                         1\n",
       "Saint John                      1\n",
       "Addy                            1\n",
       "Methow                          1\n",
       "Spangle                         1\n",
       "Mesa                            1\n",
       "McKenna                         1\n",
       "Palisades                       1\n",
       "Albion                          1\n",
       "Doty                            1\n",
       "Conway                          1\n",
       "Pe Ell                          1\n",
       "South Bend                      1\n",
       "Waldron                         1\n",
       "Centerville                     1\n",
       "McChord Afb                     1\n",
       "Tieton                          1\n",
       "Ethel                           1\n",
       "Chinook                         1\n",
       "Beaver                          1\n",
       "Usk                             1\n",
       "Fairfield                       1\n",
       "Copalis Crossing                1\n",
       "Pomeroy                         1\n",
       "Thorp                           1\n",
       "Mansfield                       1\n",
       "Electric City                   1\n",
       "Eltopia                         1\n",
       "Harrington                      1\n",
       "Ryderwood                       1\n",
       "Tekoa                           1\n",
       "Bay Center                      1\n",
       "Copalis Beach                   1\n",
       "Grayland                        1\n",
       "Carbonado                       1\n",
       "Anatone                         1\n",
       "Moclips                         1\n",
       "Ketron Island                   1\n",
       "Name: City, dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get Top 10 cities which had purchased electric cars within WA State\n",
    "top_10_cities = ecar.loc[ecar.State=='WA','City'].value_counts().iloc[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Seattle      10061\n",
       "Bellevue      2983\n",
       "Redmond       2287\n",
       "Kirkland      1790\n",
       "Vancouver     1745\n",
       "Sammamish     1634\n",
       "Bothell       1490\n",
       "Olympia       1370\n",
       "Renton        1187\n",
       "Tacoma        1160\n",
       "Name: City, dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_10_cities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>City</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>10061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Bellevue</td>\n",
       "      <td>2983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Redmond</td>\n",
       "      <td>2287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Kirkland</td>\n",
       "      <td>1790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Vancouver</td>\n",
       "      <td>1745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Sammamish</td>\n",
       "      <td>1634</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Bothell</td>\n",
       "      <td>1490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Olympia</td>\n",
       "      <td>1370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Renton</td>\n",
       "      <td>1187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Tacoma</td>\n",
       "      <td>1160</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       index   City\n",
       "0    Seattle  10061\n",
       "1   Bellevue   2983\n",
       "2    Redmond   2287\n",
       "3   Kirkland   1790\n",
       "4  Vancouver   1745\n",
       "5  Sammamish   1634\n",
       "6    Bothell   1490\n",
       "7    Olympia   1370\n",
       "8     Renton   1187\n",
       "9     Tacoma   1160"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_10_cities = top_10_cities.to_frame().reset_index()\n",
    "top_10_cities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City_Name</th>\n",
       "      <th>City</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>10061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Bellevue</td>\n",
       "      <td>2983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Redmond</td>\n",
       "      <td>2287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Kirkland</td>\n",
       "      <td>1790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Vancouver</td>\n",
       "      <td>1745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Sammamish</td>\n",
       "      <td>1634</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Bothell</td>\n",
       "      <td>1490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Olympia</td>\n",
       "      <td>1370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Renton</td>\n",
       "      <td>1187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Tacoma</td>\n",
       "      <td>1160</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   City_Name   City\n",
       "0    Seattle  10061\n",
       "1   Bellevue   2983\n",
       "2    Redmond   2287\n",
       "3   Kirkland   1790\n",
       "4  Vancouver   1745\n",
       "5  Sammamish   1634\n",
       "6    Bothell   1490\n",
       "7    Olympia   1370\n",
       "8     Renton   1187\n",
       "9     Tacoma   1160"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_10_cities = top_10_cities.rename(columns = {'index':'City_Name'})\n",
    "top_10_cities"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pie Chart"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pie(top_10_cities.City, labels=top_10_cities.City_Name, startangle=90, autopct='%.1f%%')\n",
    "plt.title('Top 10 Cities of E-Car Purchase in WA',color='blue')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"4\" halign=\"left\">Make</th>\n",
       "      <th colspan=\"4\" halign=\"left\">Model</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>unique</th>\n",
       "      <th>top</th>\n",
       "      <th>freq</th>\n",
       "      <th>count</th>\n",
       "      <th>unique</th>\n",
       "      <th>top</th>\n",
       "      <th>freq</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2008</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>Tesla</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>Roadster</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2010</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>Tesla</td>\n",
       "      <td>28</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>Roadster</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2011</td>\n",
       "      <td>959</td>\n",
       "      <td>6</td>\n",
       "      <td>Nissan</td>\n",
       "      <td>858</td>\n",
       "      <td>959</td>\n",
       "      <td>6</td>\n",
       "      <td>Leaf</td>\n",
       "      <td>858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2012</td>\n",
       "      <td>1846</td>\n",
       "      <td>8</td>\n",
       "      <td>Nissan</td>\n",
       "      <td>690</td>\n",
       "      <td>1846</td>\n",
       "      <td>10</td>\n",
       "      <td>Leaf</td>\n",
       "      <td>690</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2013</td>\n",
       "      <td>5099</td>\n",
       "      <td>7</td>\n",
       "      <td>Nissan</td>\n",
       "      <td>2182</td>\n",
       "      <td>5099</td>\n",
       "      <td>11</td>\n",
       "      <td>Leaf</td>\n",
       "      <td>2182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2014</td>\n",
       "      <td>3884</td>\n",
       "      <td>13</td>\n",
       "      <td>Nissan</td>\n",
       "      <td>736</td>\n",
       "      <td>3884</td>\n",
       "      <td>19</td>\n",
       "      <td>Leaf</td>\n",
       "      <td>736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2015</td>\n",
       "      <td>5170</td>\n",
       "      <td>12</td>\n",
       "      <td>Nissan</td>\n",
       "      <td>1954</td>\n",
       "      <td>5170</td>\n",
       "      <td>19</td>\n",
       "      <td>Leaf</td>\n",
       "      <td>1954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2016</td>\n",
       "      <td>6122</td>\n",
       "      <td>16</td>\n",
       "      <td>Tesla</td>\n",
       "      <td>1479</td>\n",
       "      <td>6122</td>\n",
       "      <td>27</td>\n",
       "      <td>Leaf</td>\n",
       "      <td>1221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2017</td>\n",
       "      <td>7587</td>\n",
       "      <td>18</td>\n",
       "      <td>Chevrolet</td>\n",
       "      <td>2473</td>\n",
       "      <td>7587</td>\n",
       "      <td>32</td>\n",
       "      <td>Volt</td>\n",
       "      <td>1258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2018</td>\n",
       "      <td>13248</td>\n",
       "      <td>20</td>\n",
       "      <td>Tesla</td>\n",
       "      <td>7578</td>\n",
       "      <td>13248</td>\n",
       "      <td>40</td>\n",
       "      <td>Model 3</td>\n",
       "      <td>5995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2019</td>\n",
       "      <td>8809</td>\n",
       "      <td>19</td>\n",
       "      <td>Tesla</td>\n",
       "      <td>4744</td>\n",
       "      <td>8809</td>\n",
       "      <td>35</td>\n",
       "      <td>Model 3</td>\n",
       "      <td>4113</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Make                          Model                       \n",
       "      count unique        top  freq  count unique       top  freq\n",
       "Year                                                             \n",
       "2008     25      1      Tesla    25     25      1  Roadster    25\n",
       "2010     28      1      Tesla    28     28      1  Roadster    28\n",
       "2011    959      6     Nissan   858    959      6      Leaf   858\n",
       "2012   1846      8     Nissan   690   1846     10      Leaf   690\n",
       "2013   5099      7     Nissan  2182   5099     11      Leaf  2182\n",
       "2014   3884     13     Nissan   736   3884     19      Leaf   736\n",
       "2015   5170     12     Nissan  1954   5170     19      Leaf  1954\n",
       "2016   6122     16      Tesla  1479   6122     27      Leaf  1221\n",
       "2017   7587     18  Chevrolet  2473   7587     32      Volt  1258\n",
       "2018  13248     20      Tesla  7578  13248     40   Model 3  5995\n",
       "2019   8809     19      Tesla  4744   8809     35   Model 3  4113"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Make, Model info of Top E-Car Purchase in each year (2008 - 2019)\n",
    "ecar.groupby('Year')['Make','Model'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>unique</th>\n",
       "      <th>top</th>\n",
       "      <th>freq</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2008</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>Tesla</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2010</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>Tesla</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2011</td>\n",
       "      <td>959</td>\n",
       "      <td>6</td>\n",
       "      <td>Nissan</td>\n",
       "      <td>858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2012</td>\n",
       "      <td>1846</td>\n",
       "      <td>8</td>\n",
       "      <td>Nissan</td>\n",
       "      <td>690</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2013</td>\n",
       "      <td>5099</td>\n",
       "      <td>7</td>\n",
       "      <td>Nissan</td>\n",
       "      <td>2182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2014</td>\n",
       "      <td>3884</td>\n",
       "      <td>13</td>\n",
       "      <td>Nissan</td>\n",
       "      <td>736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2015</td>\n",
       "      <td>5170</td>\n",
       "      <td>12</td>\n",
       "      <td>Nissan</td>\n",
       "      <td>1954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2016</td>\n",
       "      <td>6122</td>\n",
       "      <td>16</td>\n",
       "      <td>Tesla</td>\n",
       "      <td>1479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2017</td>\n",
       "      <td>7587</td>\n",
       "      <td>18</td>\n",
       "      <td>Chevrolet</td>\n",
       "      <td>2473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2018</td>\n",
       "      <td>13248</td>\n",
       "      <td>20</td>\n",
       "      <td>Tesla</td>\n",
       "      <td>7578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2019</td>\n",
       "      <td>8809</td>\n",
       "      <td>19</td>\n",
       "      <td>Tesla</td>\n",
       "      <td>4744</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      count unique        top  freq\n",
       "Year                               \n",
       "2008     25      1      Tesla    25\n",
       "2010     28      1      Tesla    28\n",
       "2011    959      6     Nissan   858\n",
       "2012   1846      8     Nissan   690\n",
       "2013   5099      7     Nissan  2182\n",
       "2014   3884     13     Nissan   736\n",
       "2015   5170     12     Nissan  1954\n",
       "2016   6122     16      Tesla  1479\n",
       "2017   7587     18  Chevrolet  2473\n",
       "2018  13248     20      Tesla  7578\n",
       "2019   8809     19      Tesla  4744"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Using boxplot analyzing yearly sales status of Top 5 e-car make in year 2008 - 2019\n",
    "ecar_make = ecar.groupby('Year')['Make'].describe()\n",
    "ecar_make"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(ecar_make)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Tesla                   18044\n",
       "Nissan                  10892\n",
       "Chevrolet                7518\n",
       "Ford                     3655\n",
       "BMW                      2567\n",
       "Toyota                   2532\n",
       "Kia                      1901\n",
       "Chrysler                  732\n",
       "Hyundai                   702\n",
       "Audi                      665\n",
       "Fiat                      636\n",
       "Honda                     553\n",
       "Volvo                     514\n",
       "Volkswagen                430\n",
       "Mitsubishi                367\n",
       "Smart                     290\n",
       "Porsche                   206\n",
       "Mercedes-Benz             205\n",
       "Mini                      132\n",
       "Cadillac                   91\n",
       "Jaguar                     74\n",
       "Subaru                     33\n",
       "Fisker                     20\n",
       "Azure Dynamics              8\n",
       "HYUNDAI                     7\n",
       "Wheego Electric Cars        3\n",
       "Name: Make, dtype: int64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# list of total e-car sales counts from dataset in 2008 - 2019\n",
    "ecar.Make.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Tesla        18044\n",
       "Nissan       10892\n",
       "Chevrolet     7518\n",
       "Ford          3655\n",
       "BMW           2567\n",
       "Name: Make, dtype: int64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get Top 5 e-car make from above total sales data value counts for year 2008-2019\n",
    "top_5_make = ecar.Make.value_counts().iloc[:5]\n",
    "top_5_make"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(top_5_make)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Make</th>\n",
       "      <th>Audi</th>\n",
       "      <th>Azure Dynamics</th>\n",
       "      <th>BMW</th>\n",
       "      <th>Cadillac</th>\n",
       "      <th>Chevrolet</th>\n",
       "      <th>Chrysler</th>\n",
       "      <th>Fiat</th>\n",
       "      <th>Fisker</th>\n",
       "      <th>Ford</th>\n",
       "      <th>HYUNDAI</th>\n",
       "      <th>Honda</th>\n",
       "      <th>Hyundai</th>\n",
       "      <th>Jaguar</th>\n",
       "      <th>Kia</th>\n",
       "      <th>Mercedes-Benz</th>\n",
       "      <th>Mini</th>\n",
       "      <th>Mitsubishi</th>\n",
       "      <th>Nissan</th>\n",
       "      <th>Porsche</th>\n",
       "      <th>Smart</th>\n",
       "      <th>Subaru</th>\n",
       "      <th>Tesla</th>\n",
       "      <th>Toyota</th>\n",
       "      <th>Volkswagen</th>\n",
       "      <th>Volvo</th>\n",
       "      <th>Wheego Electric Cars</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2008</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2010</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2011</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>858</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2012</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>525</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "      <td>690</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>141</td>\n",
       "      <td>400</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2013</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>890</td>\n",
       "      <td>0</td>\n",
       "      <td>124</td>\n",
       "      <td>0</td>\n",
       "      <td>753</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2182</td>\n",
       "      <td>0</td>\n",
       "      <td>33</td>\n",
       "      <td>0</td>\n",
       "      <td>832</td>\n",
       "      <td>285</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2014</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>514</td>\n",
       "      <td>64</td>\n",
       "      <td>733</td>\n",
       "      <td>0</td>\n",
       "      <td>114</td>\n",
       "      <td>0</td>\n",
       "      <td>697</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>736</td>\n",
       "      <td>9</td>\n",
       "      <td>88</td>\n",
       "      <td>0</td>\n",
       "      <td>678</td>\n",
       "      <td>191</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2015</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>422</td>\n",
       "      <td>0</td>\n",
       "      <td>490</td>\n",
       "      <td>0</td>\n",
       "      <td>248</td>\n",
       "      <td>0</td>\n",
       "      <td>595</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1954</td>\n",
       "      <td>32</td>\n",
       "      <td>55</td>\n",
       "      <td>0</td>\n",
       "      <td>1118</td>\n",
       "      <td>74</td>\n",
       "      <td>131</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2016</td>\n",
       "      <td>189</td>\n",
       "      <td>0</td>\n",
       "      <td>402</td>\n",
       "      <td>13</td>\n",
       "      <td>283</td>\n",
       "      <td>0</td>\n",
       "      <td>132</td>\n",
       "      <td>0</td>\n",
       "      <td>826</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>607</td>\n",
       "      <td>0</td>\n",
       "      <td>471</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1221</td>\n",
       "      <td>70</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>1479</td>\n",
       "      <td>0</td>\n",
       "      <td>257</td>\n",
       "      <td>102</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2017</td>\n",
       "      <td>140</td>\n",
       "      <td>0</td>\n",
       "      <td>509</td>\n",
       "      <td>4</td>\n",
       "      <td>2473</td>\n",
       "      <td>94</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>545</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>317</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>984</td>\n",
       "      <td>54</td>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>1412</td>\n",
       "      <td>826</td>\n",
       "      <td>17</td>\n",
       "      <td>95</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2018</td>\n",
       "      <td>129</td>\n",
       "      <td>0</td>\n",
       "      <td>512</td>\n",
       "      <td>10</td>\n",
       "      <td>1059</td>\n",
       "      <td>523</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>122</td>\n",
       "      <td>0</td>\n",
       "      <td>528</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>335</td>\n",
       "      <td>29</td>\n",
       "      <td>49</td>\n",
       "      <td>173</td>\n",
       "      <td>1294</td>\n",
       "      <td>41</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>7578</td>\n",
       "      <td>632</td>\n",
       "      <td>25</td>\n",
       "      <td>176</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2019</td>\n",
       "      <td>207</td>\n",
       "      <td>0</td>\n",
       "      <td>208</td>\n",
       "      <td>0</td>\n",
       "      <td>992</td>\n",
       "      <td>115</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>99</td>\n",
       "      <td>7</td>\n",
       "      <td>17</td>\n",
       "      <td>53</td>\n",
       "      <td>74</td>\n",
       "      <td>757</td>\n",
       "      <td>66</td>\n",
       "      <td>83</td>\n",
       "      <td>114</td>\n",
       "      <td>973</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>33</td>\n",
       "      <td>4744</td>\n",
       "      <td>124</td>\n",
       "      <td>0</td>\n",
       "      <td>141</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Make  Audi  Azure Dynamics  BMW  Cadillac  Chevrolet  Chrysler  Fiat  Fisker  \\\n",
       "Year                                                                           \n",
       "2008     0               0    0         0          0         0     0       0   \n",
       "2010     0               0    0         0          0         0     0       0   \n",
       "2011     0               5    0         0         73         0     0       0   \n",
       "2012     0               3    0         0        525         0     0      20   \n",
       "2013     0               0    0         0        890         0   124       0   \n",
       "2014     0               0  514        64        733         0   114       0   \n",
       "2015     0               0  422         0        490         0   248       0   \n",
       "2016   189               0  402        13        283         0   132       0   \n",
       "2017   140               0  509         4       2473        94    17       0   \n",
       "2018   129               0  512        10       1059       523     1       0   \n",
       "2019   207               0  208         0        992       115     0       0   \n",
       "\n",
       "Make  Ford  HYUNDAI  Honda  Hyundai  Jaguar  Kia  Mercedes-Benz  Mini  \\\n",
       "Year                                                                    \n",
       "2008     0        0      0        0       0    0              0     0   \n",
       "2010     0        0      0        0       0    0              0     0   \n",
       "2011     0        0      0        0       0    0              0     0   \n",
       "2012    18        0      0        0       0    0              0     0   \n",
       "2013   753        0      0        0       0    0              0     0   \n",
       "2014   697        0      8        0       0    0             35     0   \n",
       "2015   595        0      0        0       0   21             30     0   \n",
       "2016   826        0      0      607       0  471             27     0   \n",
       "2017   545        0      0       30       0  317             18     0   \n",
       "2018   122        0    528       12       0  335             29    49   \n",
       "2019    99        7     17       53      74  757             66    83   \n",
       "\n",
       "Make  Mitsubishi  Nissan  Porsche  Smart  Subaru  Tesla  Toyota  Volkswagen  \\\n",
       "Year                                                                          \n",
       "2008           0       0        0      0       0     25       0           0   \n",
       "2010           0       0        0      0       0     28       0           0   \n",
       "2011           0     858        0     11       0      9       0           0   \n",
       "2012          49     690        0      0       0    141     400           0   \n",
       "2013           0    2182        0     33       0    832     285           0   \n",
       "2014          17     736        9     88       0    678     191           0   \n",
       "2015           0    1954       32     55       0   1118      74         131   \n",
       "2016          13    1221       70     30       0   1479       0         257   \n",
       "2017           1     984       54     51       0   1412     826          17   \n",
       "2018         173    1294       41     20       0   7578     632          25   \n",
       "2019         114     973        0      2      33   4744     124           0   \n",
       "\n",
       "Make  Volvo  Wheego Electric Cars  \n",
       "Year                               \n",
       "2008      0                     0  \n",
       "2010      0                     0  \n",
       "2011      0                     3  \n",
       "2012      0                     0  \n",
       "2013      0                     0  \n",
       "2014      0                     0  \n",
       "2015      0                     0  \n",
       "2016    102                     0  \n",
       "2017     95                     0  \n",
       "2018    176                     0  \n",
       "2019    141                     0  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top5 = pd.crosstab(ecar.Year, ecar.Make)\n",
    "top5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Make</th>\n",
       "      <th>Tesla</th>\n",
       "      <th>Nissan</th>\n",
       "      <th>Chevrolet</th>\n",
       "      <th>Ford</th>\n",
       "      <th>BMW</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2008</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2010</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2011</td>\n",
       "      <td>9</td>\n",
       "      <td>858</td>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2012</td>\n",
       "      <td>141</td>\n",
       "      <td>690</td>\n",
       "      <td>525</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2013</td>\n",
       "      <td>832</td>\n",
       "      <td>2182</td>\n",
       "      <td>890</td>\n",
       "      <td>753</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2014</td>\n",
       "      <td>678</td>\n",
       "      <td>736</td>\n",
       "      <td>733</td>\n",
       "      <td>697</td>\n",
       "      <td>514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2015</td>\n",
       "      <td>1118</td>\n",
       "      <td>1954</td>\n",
       "      <td>490</td>\n",
       "      <td>595</td>\n",
       "      <td>422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2016</td>\n",
       "      <td>1479</td>\n",
       "      <td>1221</td>\n",
       "      <td>283</td>\n",
       "      <td>826</td>\n",
       "      <td>402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2017</td>\n",
       "      <td>1412</td>\n",
       "      <td>984</td>\n",
       "      <td>2473</td>\n",
       "      <td>545</td>\n",
       "      <td>509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2018</td>\n",
       "      <td>7578</td>\n",
       "      <td>1294</td>\n",
       "      <td>1059</td>\n",
       "      <td>122</td>\n",
       "      <td>512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2019</td>\n",
       "      <td>4744</td>\n",
       "      <td>973</td>\n",
       "      <td>992</td>\n",
       "      <td>99</td>\n",
       "      <td>208</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Make  Tesla  Nissan  Chevrolet  Ford  BMW\n",
       "Year                                     \n",
       "2008     25       0          0     0    0\n",
       "2010     28       0          0     0    0\n",
       "2011      9     858         73     0    0\n",
       "2012    141     690        525    18    0\n",
       "2013    832    2182        890   753    0\n",
       "2014    678     736        733   697  514\n",
       "2015   1118    1954        490   595  422\n",
       "2016   1479    1221        283   826  402\n",
       "2017   1412     984       2473   545  509\n",
       "2018   7578    1294       1059   122  512\n",
       "2019   4744     973        992    99  208"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_5 = top5.loc[:, ['Tesla','Nissan','Chevrolet','Ford','BMW']]\n",
    "top_5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(top_5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Make</th>\n",
       "      <th>Year</th>\n",
       "      <th>Tesla</th>\n",
       "      <th>Nissan</th>\n",
       "      <th>Chevrolet</th>\n",
       "      <th>Ford</th>\n",
       "      <th>BMW</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2008</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2011</td>\n",
       "      <td>9</td>\n",
       "      <td>858</td>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2012</td>\n",
       "      <td>141</td>\n",
       "      <td>690</td>\n",
       "      <td>525</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2013</td>\n",
       "      <td>832</td>\n",
       "      <td>2182</td>\n",
       "      <td>890</td>\n",
       "      <td>753</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>2014</td>\n",
       "      <td>678</td>\n",
       "      <td>736</td>\n",
       "      <td>733</td>\n",
       "      <td>697</td>\n",
       "      <td>514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>2015</td>\n",
       "      <td>1118</td>\n",
       "      <td>1954</td>\n",
       "      <td>490</td>\n",
       "      <td>595</td>\n",
       "      <td>422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>2016</td>\n",
       "      <td>1479</td>\n",
       "      <td>1221</td>\n",
       "      <td>283</td>\n",
       "      <td>826</td>\n",
       "      <td>402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>2017</td>\n",
       "      <td>1412</td>\n",
       "      <td>984</td>\n",
       "      <td>2473</td>\n",
       "      <td>545</td>\n",
       "      <td>509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>2018</td>\n",
       "      <td>7578</td>\n",
       "      <td>1294</td>\n",
       "      <td>1059</td>\n",
       "      <td>122</td>\n",
       "      <td>512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>2019</td>\n",
       "      <td>4744</td>\n",
       "      <td>973</td>\n",
       "      <td>992</td>\n",
       "      <td>99</td>\n",
       "      <td>208</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Make  Year  Tesla  Nissan  Chevrolet  Ford  BMW\n",
       "0     2008     25       0          0     0    0\n",
       "1     2010     28       0          0     0    0\n",
       "2     2011      9     858         73     0    0\n",
       "3     2012    141     690        525    18    0\n",
       "4     2013    832    2182        890   753    0\n",
       "5     2014    678     736        733   697  514\n",
       "6     2015   1118    1954        490   595  422\n",
       "7     2016   1479    1221        283   826  402\n",
       "8     2017   1412     984       2473   545  509\n",
       "9     2018   7578    1294       1059   122  512\n",
       "10    2019   4744     973        992    99  208"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_5.reset_index(inplace=True)\n",
    "top_5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bar Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "t5 = top_5.groupby('Year')['Tesla','Nissan','Chevrolet','Ford','BMW'].sum()\n",
    "t5.reset_index(drop=False, inplace=True)\n",
    "t5.columns\n",
    "t5.plot(\"Year\", ['Tesla','Nissan','Chevrolet','Ford','BMW'], kind='bar', stacked='True')\n",
    "plt.xlabel('Year', color='blue',fontsize = 13)\n",
    "plt.ylabel('Count', color='blue',fontsize = 13)\n",
    "plt.title('Top 5 E-Car Make in WA\\n 2008 - 2019',color='blue')\n",
    "plt.yticks(np.arange(0, 11000, 1000))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pie Chart"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Model 3     10143\n",
       "Model S      5488\n",
       "Model X      2351\n",
       "Roadster       62\n",
       "Name: Model, dtype: int64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check Top Models of Tesla sold in Pie chart\n",
    "tesla = ecar.loc[ecar.Make=='Tesla','Model'].value_counts()\n",
    "tesla"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>Model</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Model 3</td>\n",
       "      <td>10143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Model S</td>\n",
       "      <td>5488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Model X</td>\n",
       "      <td>2351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Roadster</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      index  Model\n",
       "0   Model 3  10143\n",
       "1   Model S   5488\n",
       "2   Model X   2351\n",
       "3  Roadster     62"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tesla_model = tesla.to_frame().reset_index()\n",
    "tesla_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Model 3</td>\n",
       "      <td>10143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Model S</td>\n",
       "      <td>5488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Model X</td>\n",
       "      <td>2351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Roadster</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Model  Count\n",
       "0   Model 3  10143\n",
       "1   Model S   5488\n",
       "2   Model X   2351\n",
       "3  Roadster     62"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tesla_model = tesla_model.rename(columns={'index':'Model','Model':'Count'})\n",
    "tesla_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pie(tesla_model.Count, labels=tesla_model.Model, startangle=90, autopct='%.1f%%')\n",
    "plt.title('Top Model of Tesla Purchased in WA',color='blue')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Heat Map "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Heat Map\n",
    "t5_corr = t5.corr()\n",
    "sns.heatmap(t5_corr)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scatter Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Scatter plot visualization of E-Car Make Market Growth annually\n",
    "plt.scatter(ecar.Year, ecar.Make)\n",
    "plt.xlabel('Year', color='blue',fontsize = 13)\n",
    "plt.ylabel('E-Car Make', color='blue',fontsize = 13)\n",
    "plt.title('E-Car Make Growth along Year', fontsize = 16, color = 'red')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Box Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.Range.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "289"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.Range.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# boxplot of E-Car Drive Range\n",
    "plt.boxplot(ecar.Range)\n",
    "plt.ylabel('Drive Range in miles', color='blue',fontsize = 13)\n",
    "plt.yticks(np.arange(0,325,25))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Histogram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Histogram of E-Car Drive Range versus Average Range\n",
    "plt.hist(ecar['Range'], bins = 25)\n",
    "plt.title('Drive Range vs. Average\\n')\n",
    "plt.axvline(ecar['Range'].mean(),\n",
    "            label = 'Average drive range',\n",
    "            color='r',\n",
    "            linestyle = 'dashed')\n",
    "plt.xlabel('E-Car Drive Range',color='blue')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Battery Electric Vehicle (BEV)            35671\n",
       "Plug-in Hybrid Electric Vehicle (PHEV)    17106\n",
       "Name: Type, dtype: int64"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.Type.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Clean Alternative Fuel Vehicle Eligible    42958\n",
       "Not eligible due to low battery range       9819\n",
       "Name: CAFV_Eligibility, dtype: int64"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ecar.CAFV_Eligibility.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Range Comparison Histogram between PHEV type E-Car and BEV type\n",
    "plt.figure(figsize = (6,4))\n",
    "plt.hist(ecar.loc[ecar.Type1 == 0, 'Range'],alpha = 0.5,color = 'orange',label='Plug-in Hybrid Electric Vehicle (PHEV)')\n",
    "plt.hist(ecar.loc[ecar.Type1 == 1, 'Range'],alpha = 0.5,color = 'blue',label='Battery Electric Vehicle (BEV)')\n",
    "plt.axvline(ecar.loc[ecar.Type1==0,'Range'].mean(),label = 'Average drive range of PHEV',color='r',linestyle = 'dashed')\n",
    "plt.axvline(ecar.loc[ecar.Type1==1,'Range'].mean(),label = 'Average drive range of BEV',color='green',linestyle = 'dashed')\n",
    "plt.ylabel(\"Count\",color='b')\n",
    "plt.xlabel('E-Car Drive Range',color='b')\n",
    "plt.title('Comparison of PHEV Type\\n vs. BEV Type', fontsize=15,color='red')\n",
    "plt.legend(loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Another Range comparison histogram between CAFV Eligible E-Car versus Not Eligible E-Car\n",
    "plt.figure(figsize = (6,4))\n",
    "plt.hist(ecar.loc[ecar.Eligibility1 == 0, 'Range'],alpha = 0.5,color = 'orange',label='Not Eligible as low battery range')\n",
    "plt.hist(ecar.loc[ecar.Eligibility1 == 1, 'Range'],alpha = 0.5,color = 'blue',label='Clean Alternative Fuel Vehicle Eligible')\n",
    "plt.axvline(ecar.loc[ecar.Eligibility1==0,'Range'].mean(),label = 'Average range of Not eligible',color='r',linestyle = 'dashed')\n",
    "plt.axvline(ecar.loc[ecar.Eligibility1==1,'Range'].mean(),label = 'Average range of CAFV Eligible',color='green',linestyle = 'dashed')\n",
    "plt.ylabel(\"Count\",color='b')\n",
    "plt.xlabel('E-Car Drive Range',color='b')\n",
    "plt.title('Range of Clean Alternative Fuel Vehicle (CAFV)\\n Eligible vs. Not Eligible', fontsize=15,color='red')\n",
    "plt.legend(loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scatter Plot for comparision"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Range comparison in Scatter plot \n",
    "plt.scatter(ecar.loc[(ecar.State==\"WA\") &\n",
    "                         (ecar.Type1==1), 'Year'],\n",
    "            ecar.loc[(ecar.State==\"WA\") &\n",
    "                         (ecar.Type1==1), 'Range'],\n",
    "            color = 'red',\n",
    "            label = 'Type: Battery Electric Vehicle (BEV) ')\n",
    "\n",
    "plt.scatter(ecar.loc[(ecar.State==\"WA\") &\n",
    "                         (ecar.Type1==0), 'Year'],\n",
    "            ecar.loc[(ecar.State==\"WA\") &\n",
    "                         (ecar.Type1==0), 'Range'],\n",
    "            color = 'blue',\n",
    "            label = 'Type: Plug-in Hybrid Electric Vehicle (PHEV)')\n",
    "\n",
    "plt.xlabel('Years',color='blue')\n",
    "plt.ylabel('Range in miles',color='blue')\n",
    "plt.title('E-Car Range Comparison\\n Type BEV vs. PHEV\\n 2008 - 2019',\n",
    "          fontsize = 15, color = 'red')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Seaborn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 587.725x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Another Range comparison in Seaborn\n",
    "sns.set(style='whitegrid')\n",
    "g= sns.lmplot(x='Year', y='Range',hue='Type',palette='bright',data=ecar,fit_reg=False)\n",
    "g.set_ylabels('Range in Miles',color='b')\n",
    "g.set_xlabels('Years',color='b')\n",
    "plt.title('Range Comparison in Miles\\n BEV vs. PHEV\\n 2008-2019',fontsize=16,color='magenta')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scatter Plot for comparision"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(52776, 17)"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Scatter plot of Range and MSRP\n",
    "ecar = ecar.loc[ecar.MSRP <= 200000, :]\n",
    "ecar.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 587.725x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 586.225x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot(x='Range', y='MSRP', hue='Type', palette='bright', data=ecar, fit_reg=False)\n",
    "sns.lmplot(x='Range', y='MSRP', hue='CAFV_Eligibility', palette='bright', data=ecar, fit_reg=False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
